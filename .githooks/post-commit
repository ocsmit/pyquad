#!/bin/sh
# Copyright (c) 2013 Martin Seeler
# SPDX-License-Identifier: MIT
set -eu
hash='[`%h`](https://github.com/ocsmit/spadmon/commit/%h)'
exclude=""

# destination of the final changelog file
OUTPUT_FILE=CHANGELOG.md

# generate the changelog
#git --no-pager log --no-merges --format="### %s%d%n>%aD%n%n>Author: %aN (%aE)%n%n>Commiter: %cN (%cE)%n%n%b%n%N%n" > $OUTPUT_FILE
(
echo "# Change log"
echo
git log --pretty="* $hash %d %s %cd" $exclude |
sed '
/(HEAD/{
    s/^\(.*\) (HEAD.*HEAD) \(.* \(\([^ ]\+ \)\{5\}[^ ]\+\)\)$/## HEAD\n\3\n\n\1 \2/
}
/(tag:/{
    s/^\(.*\) (tag: \([^)]*\)) \(.*\) \(\([^ ]\+ \)\{5\}[^ ]\+\)$/\n## \2\n\4\n\n\1 \3 \4/
}
s/\( [^ ]\+\)\{6\}$//
s/_/\\_/g
'
) > $OUTPUT_FILE

# prevent recursion!
# since a 'commit --amend' will trigger the post-commit script again
# we have to check if the changelog file has changed or not
res=$(git status --porcelain | grep -c "./$OUTPUT_FILE$")
echo $res
if [ "$res" -gt 0 ]; then
  git add $OUTPUT_FILE
  git commit --amend
  echo "Populated Changelog in $OUTPUT_FILE"
fi
